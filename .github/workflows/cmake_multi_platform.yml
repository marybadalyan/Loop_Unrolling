# This starter workflow is for a CMake project running on multiple platforms.
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  
  # FIX #1: Added the workflow_dispatch trigger so you can run it manually.
  workflow_dispatch:
    inputs:
      opt_level:
        description: 'Optimization Level (e.g., O2, O3, Os)'
        required: true
        default: 'O3' # Default to O3 for manual runs
        type: string

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl


    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        shell: bash
        run: |
          # Set the base optimization level from manual input or default to 'O3'
          OPT_LEVEL="${{ github.event.inputs.opt_level || 'O3' }}"

          # --- THIS IS THE FIX ---
          # Define a variable for our flags and set it based on the compiler
          CXX_FLAGS=""
          if [ "${{ matrix.cpp_compiler }}" == "cl" ]; then
            # MSVC uses /O1, /O2, or /Ox. Let's map O3 to the equivalent /Ox.
            if [ "$OPT_LEVEL" == "O3" ]; then
              CXX_FLAGS="/Ox /DNDEBUG"
            else
              # This will handle O1 -> /O1, O2 -> /O2
              CXX_FLAGS="/${OPT_LEVEL} /DNDEBUG"
            fi
          else
            # GCC and Clang use the hyphen format
            CXX_FLAGS="-${OPT_LEVEL} -DNDEBUG"
          fi
          # --- END OF FIX ---

          # This line is great for debugging! It shows which flags are being used.
          echo "Using CXX flags for ${{ matrix.cpp_compiler }}: ${CXX_FLAGS}"

          cmake -B ${{ steps.strings.outputs.build-output-dir }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_CXX_FLAGS_RELEASE="${CXX_FLAGS}" \
            -S ${{ github.workspace }}
            
      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Run Executables and Analyze
        # This step will only run for Release builds to avoid redundancy.
        if: matrix.build_type == 'Release'
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        shell: bash
        run: |
          exe="loop_unrolling"
          analysis_dir="analysis"
          mkdir -p "${analysis_dir}"
          
        
          opt_level="${{ github.event.inputs.opt_level || 'O3' }}"
          
          if [ "$RUNNER_OS" == "Windows" ]; then
            executable_name="${{ matrix.build_type }}/${exe}.exe"
          else
            executable_name="${exe}"
          fi

          analysis_file="${analysis_dir}/assembly.txt"

          echo "--------------------------------------------------"
          echo "Running ${executable_name}..."
          echo "Analysis will be saved to: ${analysis_file}"

          if [ -f "${executable_name}" ]; then
            "./${executable_name}" "${analysis_file}" "${opt_level}"
          else
            echo "Error: Executable not found: $(pwd)/${executable_name}"
            exit 1
          fi