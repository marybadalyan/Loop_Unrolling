# This starter workflow is for a CMake project running on multiple platforms.
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # FIX: Added the workflow_dispatch trigger so your manual inputs will work.
  workflow_dispatch:
    inputs:
      opt_level:
        description: 'Optimization Level (e.g., O2, O3, Os)'
        required: true
        default: 'O3'
        type: string

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # YOUR MATRIX: Unchanged, as requested.
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      # FIX: The "Set reusable strings" step has been REMOVED as it was the source of the path errors.

      - name: Set Compiler Flags
        id: set_flags
        shell: bash
        run: |
          OPT_LEVEL="${{ github.event.inputs.opt_level || 'O3' }}"
          CXX_FLAGS=""
          if [ "${{ matrix.cpp_compiler }}" == "cl" ]; then
            if [ "$OPT_LEVEL" == "O3" ]; then
              CXX_FLAGS="/DNDEBUG"
            else
              CXX_FLAGS="/${OPT_LEVEL} /DNDEBUG"
            fi
          else
            CXX_FLAGS="-${OPT_LEVEL} -DNDEBUG"
          fi
          echo "CXX_FLAGS=${CXX_FLAGS}" >> $GITHUB_ENV
          
      - name: Configure CMake
        shell: bash
        run: >
          cmake -B build 
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} 
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} 
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} 
            -DCMAKE_CXX_FLAGS_RELEASE="${{ env.CXX_FLAGS }}"

      - name: Build
        # FIX: Using the consistent relative path 'build'.
        run: cmake --build build --config ${{ matrix.build_type }}

      - name: Test
        # FIX: Using the consistent relative path 'build'.
        working-directory: build
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Run Executables and Analyze
        if: matrix.build_type == 'Release'
        # FIX: Using the consistent relative path 'build'.
        working-directory: build
        shell: bash
        run: |
          executable="loop_unrolling"
          analysis_dir="analysis"
          mkdir -p "${analysis_dir}"
          
          opt_level="${{ github.event.inputs.opt_level || 'O3' }}"
          
          executable_name=""
          if [ "$RUNNER_OS" == "Windows" ]; then
            executable_name="${{ matrix.build_type }}/${executable}.exe"
          else
            executable_name="${executable}"
          fi

          analysis_file="${analysis_dir}/assembly.txt"

          echo "Running ${executable_name} to generate ${analysis_file}"

          if [ -f "${executable_name}" ]; then
            "./${executable_name}" "${analysis_file}" "${opt_level}"
          else
            echo "Error: Executable not found: $(pwd)/${executable_name}"
            exit 1
          fi