# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_CXX_FLAGS_RELEASE="-${{ github.event.inputs.opt_level }} -DNDEBUG" #here you can change the optimization flags for Release build
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Run Executables and Analyze
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        shell: bash
        run: |
          exe="inlining_test"
          analysis_dir="analysis"
          mkdir -p "${analysis_dir}"
          opt_level="${{ github.event.inputs.opt_level }}"
          
          if [ "$RUNNER_OS" == "Windows" ]; then
            executable_name="${{ matrix.build_type }}/${exe}.exe"
          else
            executable_name="${exe}"
          fi

          # --- SUGGESTED CHANGE ---
          # Create a unique analysis file for each optimization level
          analysis_file="${analysis_dir}/assembly_${opt_level}.txt"
          # ------------------------

          echo "--------------------------------------------------"
          echo "Running ${executable_name}..."
          echo "Analysis will be saved to: ${analysis_file}"

          if [ -f "${executable_name}" ]; then
            "./${executable_name}" "${analysis_file}" "${opt_level}" # Quoting is safest
          else
            echo "Error: Executable not found: $(pwd)/${executable_name}"
            exit 1
          fi