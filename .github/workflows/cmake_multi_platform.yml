# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        shell: bash # Explicitly setting the shell is good practice
        run: |
          # --- This is the missing logic that must be added ---
          OPT_LEVEL="${{ github.event.inputs.opt_level || 'O3' }}"
          CXX_FLAGS=""
          if [ "${{ matrix.cpp_compiler }}" == "cl" ]; then
            if [ "$OPT_LEVEL" == "O3" ]; then
              CXX_FLAGS="/Ox /DNDEBUG"
            else
              CXX_FLAGS="/${OPT_LEVEL} /DNDEBUG"
            fi
          else
            CXX_FLAGS="-${OPT_LEVEL} -DNDEBUG"
          fi
          # ----------------------------------------------------
          
          echo "Using CXX flags for Release: ${CXX_FLAGS}" # Added for debugging

          # Now the cmake command can correctly use the CXX_FLAGS variable
          cmake -B ${{ steps.strings.outputs.build-output-dir }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_CXX_FLAGS_RELEASE="${CXX_FLAGS}" \
            -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}


      - name: Run Executables and Analyze
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        shell: bash
        run: |
          executable="loop_unrolling"
          executable_name=""
          analysis_dir="analysis" # Define the directory name as a variable
          
          # FIX #2: Create the analysis directory before trying to use it.
          mkdir -p "${analysis_dir}"
          
          opt_level="${{ github.event.inputs.opt_level || 'O3' }}"

          if [ "$RUNNER_OS" == "Windows" ]; then
            executable_name="${{ matrix.build_type }}/${executable}.exe"
          else
            executable_name="${executable}"
          fi
          
          # Make the analysis file name unique based on the opt_level.
          analysis_file="${analysis_dir}/assembly.txt"

          echo "--------------------------------------------------"
          echo "Running ${executable_name}..."
          echo "Analysis will be saved to: ${analysis_file}"

          if [ -f "${executable_name}" ]; then
            # Pass the analysis path (ARG 1) and optimization level (ARG 2)
            "./${executable_name}" "${analysis_file}" "${opt_level}"
          else
            echo "Error: Executable not found: $(pwd)/${executable_name}"
            exit 1
          fi